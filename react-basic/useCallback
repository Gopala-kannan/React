// useCallback is a React Hook that lets you cache a function definition between re-renders.
// it means, when we use the useCallback hook it doesn't create multiple instance of same function when re-render happens.
// Instead of creating new imstance of the function, it provides the caches function oon re-render of the component.

// const newFn = useCallback(()=>{},[])

import React, { useCallback, useState } from 'react'
import './App.css'
import Header from './component/Header';

function App() {
  const [count, setCount] = useState(0);
  const newFn = useCallback((count)=>{},[count])
  return (
    <>
     <Header newFn={newFn} />  // this is another header file will imported
     <h1>{count}</h1>
     <button onClick={() => setCount(prev =>prev + 1)}>Click Here</button>
    </>
  )
}

export default App;

// <Header /> file
import React from 'react'

const Header = () => {
  return (
    <div>
        <h2>Hearder</h2>
    </div>
  )
}

export default React.memo(Header);
