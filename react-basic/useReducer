// useReducer is similar to useState, But instead of providing state & setter function. It provides state and dispatch function.
// The useReducer hook accepts two arguments
// -Reducer function
// -Initial state
// and returns : current state adn Dispatch method 
// The first argument the reducer function specifies how the state gets updated.

// useReducer(reducer, {state})
// const [state, dispatch] = useReducer(reducer, initialState)

import React, { useState } from 'react'
import './App.css'
import { useReducer } from 'react'

function App() {
  const initialState = {count:0}
  const reducer = (state, action) =>{
    switch(action.type){
      case 'increase' :{
        return {count: state.count + 1}
      }
      case 'decrease' :{
        return {count: state.count - 1}
      }
      case 'input' :{
        return {count: action.payload}
      }
      default :{
        return state
      }
    }
  }
  const [state, dispatch] = useReducer(reducer, initialState)
  return (
    <>
      <h1>{state.count}</h1>
      <button onClick={()=>dispatch({type: 'increase'})}>Increase</button>
      <button onClick={()=>dispatch({type: 'decrease'})}>Decrease</button>
      <br />
      <input value={state.count} onChange={(e)=>dispatch({type: 'input', payload:Number(e.target.value)})} type="number" /> // action
    </>
  )
}

export default App;

